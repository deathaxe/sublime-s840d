// SYNTAX TEST "Step7 AWL.sublime-syntax"

// ==================================================
//  common
//  Performance: 3.0ms
// ==================================================

///////////////////////////////////////////////////////////////////////////////
// datatypes                                                                 //
///////////////////////////////////////////////////////////////////////////////

  TYPE "UDT_TypeName"
//^^^^^^^^^^^^^^^^^^^^ meta.block.udt.header
//^^^^ keyword.declaration.udt.begin
//     ^ punctuation.definition.variable.begin
//     ^^^^^^^^^^^^^^ entity.name.type
//                  ^ punctuation.definition.variable.end
  TITLE = Type Title
//^^^^^^^^^^^^^^^^^^ meta.block.udt.header.plc
//^^^^^^^ meta.mapping.key.plc
//       ^^^^^^^^^^^ meta.mapping.value.plc
//^^^^^ entity.other.attribute-name.title.plc
//      ^ punctuation.separator.key-value.title.plc
//        ^^^^^^^^^^ entity.name.section.plc
   { S7_language := '7(1) Deutsch (Deutschland)  19.01.2014  10:33:55' }
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.udt.header meta.annotation
// ^ punctuation.definition.annotation.begin
//   ^^^^^^^^^^^ variable.annotation
//               ^^ keyword.operator.assignment
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single
//                                                                     ^ punctuation.definition.annotation.end
   NON_RETAIN
// ^^^^^^^^^^ invalid.illegal
   READ_ONLY
// ^^^^^^^^^ invalid.illegal
   VERSION : 1.0
// ^^^^^^^^^^^^^ meta.block.udt.header
// ^^^^^^^^^ meta.mapping.key - meta.mapping.value
//          ^^^^ meta.mapping.value
// ^^^^^^^ entity.other.attribute-name
//         ^ punctuation.separator.key-value
//           ^ constant.numeric.float.version.major
//            ^ punctuation.separator.decimal.version
//             ^ constant.numeric.float.version.minor
   AUTHOR : name
// ^^^^^^^^^^^^^ meta.block.udt.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   FAMILY : name
// ^^^^^^^^^^^^^ meta.block.udt.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   NAME : name
// ^^^^^^^^^^^ meta.block.udt.header
// ^^^^^^ meta.mapping.key - meta.mapping.value
//       ^^^^^ meta.mapping.value
// ^^^^ entity.other.attribute-name
//      ^ punctuation.separator.key-value
//        ^^^^ string.unquoted
   ILLEGAL : unknown
// ^^^^^^^^^^^^^^^^^ meta.block.udt.header
// ^^^^^^^ invalid.illegal
//         ^ invalid.illegal
//           ^^^^^^^ invalid.illegal
  STRUCT
//^^^^^^^ meta.block.udt.header meta.struct
//^^^^^^ storage.type.struct.begin
     ID  : INT := 20 ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.udt.header meta.struct
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^ meta.definition.variable.storage
//             ^^ meta.definition.variable - meta.definition.variable.storage - meta.definition.variable.value
//               ^^^^ meta.definition.variable.value
//   ^^ variable.other
//       ^ punctuation.separator.type
//         ^^^ storage.type.integer
//             ^^ keyword.operator.assignment
//                ^^ meta.number.integer.decimal constant.numeric.value
//                   ^ punctuation.terminator.statement
//                    ^^ - invalid
//                      ^^^^^^^^^ comment.line.double-slash
//                               ^ - invalid
     PTR : POINTER := P#0.0;
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.udt.header meta.struct
//   ^^^^^ meta.definition.variable
//        ^^^^^^^^^ meta.definition.variable.storage
//                 ^^ meta.definition.variable
//                   ^^^^^^ meta.definition.variable.value
//   ^^^ variable.other
//       ^ punctuation.separator.type
//         ^^^^^^^ storage.type.pointer
//                 ^^ keyword.operator.assignment
//                    ^^^^^ constant.language.pointer
     TMR : TIMER := T0;
// ^^^^^^^^^^^^^^^^^^^^^ meta.block.udt.header meta.struct
//   ^^^^^ meta.definition.variable
//        ^^^^^^^ meta.definition.variable.storage
//               ^^ meta.definition.variable
//                 ^^^ meta.definition.variable.value
//   ^^^ variable.other
//       ^ punctuation.separator.type
//         ^^^^^ storage.type.timer
//               ^^ keyword.operator.assignment
//                  ^^ variable.language.timer
  END_STRUCT ;
//^^^^^^^^^^^^^ meta.block.udt.header
//^^^^^^^^^^ meta.struct storage.type.struct.end
//           ^ punctuation.terminator.statement
  BEGIN
//^^^^^^ meta.block.udt.header
//^^^^^ invalid.illegal
  END_TYPE
//^^^^^^^^ meta.block.udt.header
//^^^^^^^^ keyword.declaration.udt.end

///////////////////////////////////////////////////////////////////////////////
// datablocks                                                                //
///////////////////////////////////////////////////////////////////////////////

  DATA_BLOCK "name" // comment
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.db.header
// ^^^^^^^^^ keyword.declaration.db.begin
//           ^ punctuation.definition.variable.begin
//           ^^^^^^ entity.name.datablock
//                ^ punctuation.definition.variable.end
//                  ^^ punctuation.definition.comment.begin
//                  ^^^^^^^^^^ comment.line.double-slash
   TITLE =the datablock description
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.db.header
// ^^^^^^^ meta.mapping.key - meta.mapping.value
//        ^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value - meta.mapping.key
// ^^^^^ entity.other.attribute-name.title
//       ^ punctuation.separator.key-value.title
//        ^^^^^^^^^^^^^^^^^^^^^^^^^ entity.name.section
   { S7_language := '7(1) Deutsch (Deutschland)  19.01.2014  10:33:55' }
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.db.header meta.annotation
// ^ punctuation.definition.annotation.begin
//   ^^^^^^^^^^^ variable.annotation
//               ^^ keyword.operator.assignment
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single
//                                                                     ^ punctuation.definition.annotation.end
   NON_RETAIN
// ^^^^^^^^^^ entity.other.attribute-name
   READ_ONLY
// ^^^^^^^^^ entity.other.attribute-name
   VERSION : 1.0
// ^^^^^^^^^^^^^ meta.block.db.header
// ^^^^^^^^^ meta.mapping.key - meta.mapping.value
//          ^^^^ meta.mapping.value
// ^^^^^^^ entity.other.attribute-name
//         ^ punctuation.separator.key-value
//           ^ constant.numeric.float.version.major
//            ^ punctuation.separator.decimal.version
//             ^ constant.numeric.float.version.minor
   AUTHOR : name
// ^^^^^^^^^^^^^ meta.block.db.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   FAMILY : name
// ^^^^^^^^^^^^^ meta.block.db.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   NAME : name
// ^^^^^^^^^^^ meta.block.db.header
// ^^^^^^ meta.mapping.key - meta.mapping.value
//       ^^^^^ meta.mapping.value
// ^^^^ entity.other.attribute-name
//      ^ punctuation.separator.key-value
//        ^^^^ string.unquoted
   ILLEGAL : unknown
// ^^^^^^^^^^^^^^^^^ meta.block.db.header
// ^^^^^^^ invalid.illegal
//         ^ invalid.illegal
//           ^^^^^^^ invalid.illegal

   "UDT_TypeName"
//<- meta.block.db.header
// ^^^^^^^^^^^^^^ meta.block.db.header
// ^ punctuation.definition.variable.begin
// ^^^^^^^^^^^^^^ variable.other.global
//              ^ punctuation.definition.variable.end
   BEGIN illegal // comment
//<- meta.block.db.header
//^ meta.block.db.header - meta.block.db.body
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.db.body - meta.block.db.header
// ^^^^^ keyword.other.begin
//       ^^^^^^^ invalid.illegal
//               ^^ punctuation.definition.comment.begin
//               ^^^^^^^^^^ comment.line.double-slash

   VAR[0].child[ 0 ].attr := W#16#0 ;  // comment
//<- meta.block.db.body
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.db.body
// ^^^^^^^^^^^^^^^^^^^^^^ meta.path
//    ^^^ meta.brackets
//             ^^^^^ meta.brackets
// ^^^ variable.namespace.struct
//    ^ punctuation.section.brackets.begin
//     ^ meta.number.integer.decimal constant.numeric.value
//      ^ punctuation.section.brackets.end
//       ^ punctuation.accessor.dot
//        ^^^^^ variable.namespace.struct
//             ^ punctuation.section.brackets.begin
//               ^ meta.number.integer.decimal constant.numeric.value
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.accessor.dot
//                   ^^^^ variable.other.member
//                        ^^ keyword.operator.assignment
//                           ^^^^^^^^^^^^^^^^^^^^^ meta.block.db.body
//                           ^ storage.type.integer
//                            ^ punctuation.separator.type
//                             ^^^ constant.numeric.base
//                               ^ punctuation.separator.base
//                                ^ constant.numeric.value
//                                  ^ punctuation.terminator.statement
   test := W#16 ; illegal // comment
// ^^^^ variable.other.local
//      ^^ keyword.operator.assignment
//         ^^^^ invalid.illegal
//             ^ - invalid
//              ^ punctuation.terminator.statement
//               ^ - invalid
//                ^^^^^^^^ invalid.illegal.eol-expected
//                        ^^ punctuation.definition.comment.begin
//                        ^^^^^^^^^^ comment.line.double-slash
   incomplete
   next_is_valid
// ^^^^^^^^^^^^^ variable.other.local
   date_time := DT#90-1-1-0:0:0.000;
//              ^^^^^^^^^^^^^^^^^^^ meta.number.date-and-time
//              ^^ storage.type.time
//                ^ punctuation.separator.type
//                 ^^^^^^^^^^^^^^^^ constant.numeric.value
//                   ^ punctuation.separator.date
//                     ^ punctuation.separator.date
//                       ^ punctuation.separator.date
//                         ^ punctuation.separator.time
//                           ^ punctuation.separator.time
//                             ^ punctuation.separator.time
   date_time := DT#2017-12-31-23:59:59.999;
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.number.date-and-time
//              ^^ storage.type.time
//                ^ punctuation.separator.type
//                 ^^^^^^^^^^^^^^^^^^^^^^^ constant.numeric.value
//                     ^ punctuation.separator.date
//                        ^ punctuation.separator.date
//                           ^ punctuation.separator.date
//                              ^ punctuation.separator.time
//                                 ^ punctuation.separator.time
//                                    ^ punctuation.separator.time
   date_time := DT#2017;
//              ^^^^^^^ invalid.illegal
   END_DATA_BLOCK
//<- meta.block.db.body
//^^^^^^^^^^^^^^^ meta.block.db.body
// ^^^^^^^^^^^^^^ keyword.declaration.db.end

DATA_BLOCK "ClassicDB"
   STRUCT
// ^^^^^^ storage.type.struct.begin.plc
      variable : Array[1..5] of "typeVar";
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.db.header.plc meta.struct.plc
//               ^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array.plc
//    ^^^^^^^^ variable.other.local.plc
//             ^ punctuation.separator.type.plc
//               ^^^^^ storage.type.array.plc
//                           ^^ keyword.control.of.plc
//                              ^^^^^^^^^ storage.type.other.plc
//                                       ^ punctuation.terminator.statement.plc
   END_STRUCT
// ^^^^^^^^^^ storage.type.struct.end.plc

BEGIN
// <- meta.block.db.body.plc keyword.other.begin.plc
//^^^ meta.block.db.body.plc keyword.other.begin.plc

END_DATA_BLOCK
// <- meta.block.db.body.plc keyword.declaration.db.end.plc
//^^^^^^^^^^^^ meta.block.db.body.plc keyword.declaration.db.end.plc

DATA_BLOCK "TiaDB"
   VAR
// ^^^ keyword.declaration.var.stat.begin.plc
      variable : Array[1..5] of "typeVar";
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.db.header.plc meta.block.var.stat.plc
//               ^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array.plc
//    ^^^^^^^^ variable.other.local.plc
//             ^ punctuation.separator.type.plc
//               ^^^^^ storage.type.array.plc
//                           ^^ keyword.control.of.plc
//                              ^^^^^^^^^ storage.type.other.plc
//                                       ^ punctuation.terminator.statement.plc
   END_VAR
// ^^^^^^^ keyword.declaration.var.end.plc

BEGIN
// <- meta.block.db.body.plc keyword.other.begin.plc
//^^^ meta.block.db.body.plc keyword.other.begin.plc

END_DATA_BLOCK
// <- meta.block.db.body.plc keyword.declaration.db.end.plc
//^^^^^^^^^^^^ meta.block.db.body.plc keyword.declaration.db.end.plc

///////////////////////////////////////////////////////////////////////////////
// functions                                                                 //
///////////////////////////////////////////////////////////////////////////////

   FUNCTION FC 102 : INT  // comment
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header
// ^^^^^^^^ keyword.declaration.fc.begin
//          ^^^^^^ entity.name.function
//                 ^ punctuation.separator.mapping.pair
//                   ^^^ storage.type.integer
//                        ^^ punctuation.definition.comment.begin
//                        ^^^^^^^^^^ comment.line.double-slash
   TITLE =the function description
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header
// ^^^^^^^ meta.mapping.key - meta.mapping.value
//        ^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value - meta.mapping.key
// ^^^^^ entity.other.attribute-name.title
//       ^ punctuation.separator.key-value.title
//        ^^^^^^^^^^^^^^^^^^^^^^^^ entity.name.section
   { S7_language := '7(1) Deutsch (Deutschland)  19.01.2014  10:33:55' }
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.annotation
// ^ punctuation.definition.annotation.begin
//   ^^^^^^^^^^^ variable.annotation
//               ^^ keyword.operator.assignment
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single
//                                                                     ^ punctuation.definition.annotation.end
   VERSION : 1.0
// ^^^^^^^^^^^^^ meta.block.fc.header
// ^^^^^^^^^ meta.mapping.key - meta.mapping.value
//          ^^^^ meta.mapping.value
// ^^^^^^^ entity.other.attribute-name
//         ^ punctuation.separator.key-value
//           ^ constant.numeric.float.version.major
//            ^ punctuation.separator.decimal.version
//             ^ constant.numeric.float.version.minor
   AUTHOR : name
// ^^^^^^^^^^^^^ meta.block.fc.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   FAMILY : name
// ^^^^^^^^^^^^^ meta.block.fc.header
// ^^^^^^^^ meta.mapping.key - meta.mapping.value
//         ^^^^^ meta.mapping.value
// ^^^^^^ entity.other.attribute-name
//        ^ punctuation.separator.key-value
//          ^^^^ string.unquoted
   NAME : name
// ^^^^^^^^^^^ meta.block.fc.header
// ^^^^^^ meta.mapping.key - meta.mapping.value
//       ^^^^^ meta.mapping.value
// ^^^^ entity.other.attribute-name
//      ^ punctuation.separator.key-value
//        ^^^^ string.unquoted
   ILLEGAL : unknown
// ^^^^^^^^^^^^^^^^^ meta.block.fc.header
// ^^^^^^^ invalid.illegal
//         ^ invalid.illegal
//           ^^^^^^^ invalid.illegal

   VAR_INPUT illegal // comment
// <- meta.block.fc.header - meta.block.fc.body
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
// ^^^^^^^^^ keyword.declaration.var.input.begin
//           ^^^^^^^ invalid.illegal.eol-expected
//                   ^^^^^^^^^^ comment.line.double-slash
     RUN : BOOL := TRUE ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage - meta.definition.variable.value
//              ^^ meta.definition.variable - meta.definition.variable.storage - meta.definition.variable.value
//                ^^^^^^ meta.definition.variable.value - meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.type
//         ^^^^ storage.type.bool
//              ^^ keyword.operator.assignment
//                 ^^^^ constant.language.boolean
//                      ^ punctuation.terminator.statement
//                       ^^ - invalid
//                         ^^^^^^ comment.line.double-slash
//                               ^ - invalid
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.type
//         ^^^ storage.type.integer
//              ^ punctuation.terminator.statement
//               ^^ - invalid
//                 ^^^^^^^^^ comment.line.double-slash
//                          ^ - invalid
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^^^^^ storage.type.string
//                     ^ punctuation.terminator.statement
//                      ^^ - invalid
//                        ^^^^^^^^ comment.line.double-slash
//                                ^ - invalid
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ meta.number.integer constant.numeric.value
//                   ^^ keyword.operator.range
//                      ^^ meta.number.integer constant.numeric.value
//                         ^ punctuation.definition.array.end
//                          ^ - invalid
//                           ^^ keyword.control.of
//                             ^ - invalid
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
//                                     ^ - invalid
            DWORD := [ DW#16#0, DW#16#2, DW#16#A ] ;  //integer
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^^^^ meta.sequence.array
//               ^^^^ - meta.sequence
//                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.list
//                                                ^ - meta.sequence
//          ^^^^^ storage.type.integer
//                ^^ keyword.operator.assignment
//                   ^ punctuation.section.sequence.begin
//                     ^^^^^^^ meta.number.integer.hexadecimal
//                            ^ punctuation.separator.sequence
//                              ^^^^^^^ meta.number.integer.hexadecimal
//                                     ^ punctuation.separator.sequence
//                                       ^^^^^^^ meta.number.integer.hexadecimal
//                                               ^ punctuation.section.sequence.end
//                                                ^ - invalid
//                                                 ^ punctuation.terminator.statement
//                                                  ^^ - invalid
//                                                    ^^^^^^^^^ comment.line.double-slash
//                                                             ^ - invalid
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^ storage.type.struct.begin
//                  ^^ comment.line.double-slash
//                  ^^^^^^^^^^^ comment.line.double-slash
//                             ^ - invalid
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
//                ^ punctuation.terminator.statement
//                 ^^ - invalid
//                   ^^^^^^ comment.line.double-slash
//                         ^ - invalid
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
//                ^ punctuation.terminator.statement
//                 ^^ - invalid
//                   ^^^^^^^^^ comment.line.double-slash
//                            ^ - invalid
       _S1  : STRING[32] := 'initial';  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input meta.definition.variable.storage meta.struct
//     ^^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//                       ^^ meta.definition.variable.storage meta.definition.variable
//                         ^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.value
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
//                       ^^ keyword.operator.assignment
//                          ^^^^^^^^^ string.quoted.single
//                                   ^ punctuation.terminator.statement
//                                    ^^ - invalid
//                                      ^^^^^^^^ comment.line.double-slash
//                                              ^ - invalid
       _V   : FLOAT := -1.2 ;
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input meta.definition.variable.storage meta.struct
//     ^^^^^^ meta.definition.variable
//           ^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//                  ^^ meta.definition.variable.storage meta.definition.variable
//                    ^^^^^^ meta.definition.variable.storage meta.definition.variable.value
//     ^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^ storage.type.other
//                  ^^ keyword.operator.assignment
//                     ^^^^ meta.number.float.decimal
//                     ^ keyword.operator.arithmetic
//                      ^^^ constant.numeric.value
//                       ^ punctuation.separator.decimal
//                          ^ punctuation.terminator.statement
//                           ^^ - invalid
    END_STRUCT ;
// ^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
// ^^^^^^^^^^^^ meta.definition.variable.storage
// ^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
     _AS  : ARRAY[0..20] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                          ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                ^ meta.number.integer constant.numeric.value
//                 ^^ keyword.operator.range
//                   ^^ meta.number.integer constant.numeric.value
//                     ^ punctuation.definition.array.end
//                       ^^ keyword.control.of
//                          ^^^^^^ storage.type.struct.begin
//                                 ^^ punctuation.definition.comment.begin
//                                 ^^^^^^^ comment.line.double-slash
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
//                ^ punctuation.terminator.statement
//                 ^^ - invalid
//                   ^^^^^^ comment.line.double-slash
//                         ^ - invalid
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
//                ^ punctuation.terminator.statement
//                 ^^ - invalid
//                   ^^^^^^^^^ comment.line.double-slash
//                            ^ - invalid
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
//                       ^ punctuation.terminator.statement
//                        ^^ - invalid
//                          ^^^^^^^^ comment.line.double-slash
//                                  ^ - invalid
    END_STRUCT ;
//^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.input
//^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
   END_VAR
// <- meta.block.fc.header meta.block.var.input
// ^^^^^^^ meta.block.fc.header meta.block.var.input
// ^^^^^^^ keyword.declaration.var.end

   VAR_OUTPUT
// <- meta.block.fc.header - meta.block.fc.body
// ^^^^^^^^^^ meta.block.fc.header meta.block.var.output
// ^^^^^^^^^^ keyword.declaration.var.output.begin
     RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.type
//         ^^^^ storage.type.bool
//              ^ punctuation.terminator.statement
//               ^^ - invalid
//                 ^^^^^^ comment.line.double-slash
//                       ^ - invalid
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.type
//         ^^^ storage.type.integer
//              ^ punctuation.terminator.statement
//               ^^ - invalid
//                 ^^^^^^^^^ comment.line.double-slash
//                          ^ - invalid
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^^^^^ storage.type.string
//                     ^ punctuation.terminator.statement
//                      ^^ - invalid
//                        ^^^^^^^^ comment.line.double-slash
//                                ^ - invalid
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ meta.number.integer constant.numeric.value
//                   ^^ keyword.operator.range
//                      ^^ meta.number.integer constant.numeric.value
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
            DWORD ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
// ^^^^^^^^^^^^^^ meta.definition.variable.storage meta.sequence.array
//          ^^^^^ storage.type.integer
//                   ^^^^^^^^^ comment.line.double-slash
//                            ^ - invalid
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^ storage.type.struct.begin
//                  ^^^^^^^^^^^ comment.line.double-slash
//                             ^ - invalid
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
//                ^ punctuation.terminator.statement
//                   ^^^^^^ comment.line.double-slash
//                         ^ - invalid
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
//^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
//^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
//              ^ - invalid
     _AS  : ARRAY[ 0 .. 20 ] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                              ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ meta.number.integer constant.numeric.value
//                   ^^ keyword.operator.range
//                      ^^ meta.number.integer constant.numeric.value
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^^^^^ storage.type.struct.begin
//                                     ^^ punctuation.definition.comment.begin
//                                     ^^^^^^^ comment.line.double-slash
//                                            ^ - invalid
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.output meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
//^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var
//^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
//              ^ - invalid
   END_VAR
// <- meta.block.fc.header meta.block.var.output
// ^^^^^^^ meta.block.fc.header meta.block.var.output
// ^^^^^^^ keyword.declaration.var.end

   VAR_IN_OUT
// <- meta.block.fc.header - meta.block.fc.body
// ^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
// ^^^^^^^^^^ keyword.declaration.var.in-out.begin
     RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.type
//         ^^^^ storage.type.bool
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.type
//         ^^^ storage.type.integer
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^^^^^ storage.type.string
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ meta.number.integer constant.numeric.value
//                   ^^ keyword.operator.range
//                      ^^ meta.number.integer constant.numeric.value
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
            DWORD ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
// ^^^^^^^^^^^^^^ meta.definition.variable.storage meta.sequence.array
//          ^^^^^ storage.type.integer
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^ storage.type.struct.begin
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
//^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
//              ^ - invalid
     _AS  : ARRAY[ 0 .. 20 ] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                              ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ meta.number.integer constant.numeric.value
//                   ^^ keyword.operator.range
//                      ^^ meta.number.integer constant.numeric.value
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^^^^^ storage.type.struct.begin
//                                     ^^ punctuation.definition.comment.begin
//                                     ^^^^^^^ comment.line.double-slash
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
//^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
    "name" : String;   // program name
//^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.in-out
//  ^^^^^^^ meta.definition.variable.plc
//  ^^^^^^ variable.other.local.plc
//         ^ punctuation.separator.type.plc
//           ^^^^^^ storage.type.string.plc
//                 ^ punctuation.terminator.statement.plc
   END_VAR
// <- meta.block.fc.header meta.block.var.in-out
// ^^^^^^^ meta.block.fc.header meta.block.var.in-out
// ^^^^^^^ keyword.declaration.var.end

   VAR_TEMP
// <- meta.block.fc.header - meta.block.fc.body
// ^^^^^^^^ meta.block.fc.header meta.block.var.temp
// ^^^^^^^^ keyword.declaration.var.temp.begin
     RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//       ^ punctuation.separator.type
//         ^^^^ storage.type.bool
     ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//        ^^^^^^ meta.definition.variable.storage
//   ^^ variable.other
//       ^ punctuation.separator.type
//         ^^^ storage.type.integer
     _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^ meta.definition.variable.storage
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^^^^^ storage.type.string
     _AR  : ARRAY[ 0 .. 20 ] OF //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ meta.number.integer constant.numeric.value
//                   ^^ keyword.operator.range
//                      ^^ meta.number.integer constant.numeric.value
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^ punctuation.definition.comment.begin
//                              ^^^^^^^ comment.line.double-slash
            DWORD ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
// ^^^^^^^^^^^^^^ meta.definition.variable.storage meta.sequence.array
//          ^^^^^ storage.type.integer
     _ST  : STRUCT  //structure
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^^ storage.type.struct.begin
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp meta.definition.variable.storage meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
//^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
     _AS  : ARRAY[ 0 .. 20 ] OF STRUCT //array
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//   ^^^^^ meta.definition.variable - meta.definition.variable.storage
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.definition.variable.storage
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array
//                              ^^^^^^^^^^^^^^ meta.struct
//   ^^^ variable.other
//        ^ punctuation.separator.type
//          ^^^^^ storage.type.array
//               ^ punctuation.definition.array.begin
//                 ^ meta.number.integer constant.numeric.value
//                   ^^ keyword.operator.range
//                      ^^ meta.number.integer constant.numeric.value
//                         ^ punctuation.definition.array.end
//                           ^^ keyword.control.of
//                              ^^^^^^ storage.type.struct.begin
//                                     ^^ punctuation.definition.comment.begin
//                                     ^^^^^^^ comment.line.double-slash
       RUN : BOOL ;  //bool
// ^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//         ^ punctuation.separator.type
//           ^^^^ storage.type.bool
       ID  : INT  ;  //integer
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//          ^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^ variable.other
//         ^ punctuation.separator.type
//           ^^^ storage.type.integer
       _S1  : STRING[32] ;  //string
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp meta.definition.variable.storage meta.sequence.array meta.struct
//     ^^^^^ meta.definition.variable
//           ^^^^^^^^^^^^ meta.definition.variable.storage meta.definition.variable.storage
//     ^^^ variable.other
//          ^ punctuation.separator.type
//            ^^^^^^^^^^ storage.type.string
    END_STRUCT ;
//^^^^^^^^^^^^^^^ meta.block.fc.header meta.block.var.temp
//^^^^^^^^^^^^^ meta.definition.variable.storage
//^^^^^^^^^^^^ meta.struct
//  ^^^^^^^^^^ storage.type.struct.end
//             ^ punctuation.terminator.statement
   END_VAR
// <- meta.block.fc.header meta.block.var.temp
// ^^^^^^^ meta.block.fc.header meta.block.var.temp
// ^^^^^^^ keyword.declaration.var.end

   VAR
// ^^^ meta.block.fc.header invalid.illegal
   END_VAR
// ^^^^^^^ meta.block.fc.header invalid.illegal

// NOTE: unclosed input declaration context

   VAR_INPUT
// ^^^^^^^^^ keyword.declaration.var.input.begin

   BEGIN
// <- meta.block.fc.header - meta.block.fc.body
//^ meta.block.fc.header - meta.block.fc.body
// ^^^^^ meta.block.fc.body - meta.block.fc.header
// ^^^^^ keyword.other.begin

   NETWORK //network 1
// <- meta.block.fc.body
// ^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
// ^^^^^^^ keyword.control.network
   TITLE =CALL test
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
// ^^^^^^^ meta.mapping.key
//        ^^^^^^^^^ meta.mapping.value
// ^^^^^ entity.other.attribute-name.title
//       ^ punctuation.separator.key-value.title
//        ^^^^^^^^^ entity.name.section
///////////////////////////////////////////////////////////////////////////////
// basic operations                                                          //
///////////////////////////////////////////////////////////////////////////////
      BLD  1; // comment
//    ^^^ keyword.operator.nop
//         ^ meta.number.integer constant.numeric.value
//          ^ punctuation.terminator.statement
      NOP  0; // comment
//    ^^^ keyword.operator.nop
//         ^ meta.number.integer constant.numeric.value
//          ^ punctuation.terminator.statement

///////////////////////////////////////////////////////////////////////////////
// datablock operations                                                      //
///////////////////////////////////////////////////////////////////////////////

      AUF   DB 10;
// <- meta.block.fc.body meta.block.network
//^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//       ^^^^^^^^ meta.operand.datablock
//               ^^ - meta.operand.datablock
//    ^^^ keyword.operator.load.db
//          ^^^^^ variable.language.db
//               ^ punctuation.terminator.statement
      AUF   DB [MW 10];
// <- meta.block.fc.body meta.block.network
//^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//       ^^^ meta.operand.datablock - meta.address
//          ^^^ meta.operand.datablock meta.address.indirect - meta.brackets
//             ^^^^^^^ meta.operand.datablock meta.address.indirect meta.brackets
//                    ^^ - meta.operand.datablock
//    ^^^ keyword.operator.load.db
//          ^^^^^^^^^^ meta.address.indirect
//          ^^ variable.language.timer
//             ^ punctuation.section.brackets.begin
//              ^^^^^ variable.language.address
//                   ^ punctuation.section.brackets.end
//                    ^ punctuation.terminator.statement
      AUF   "IDB_Block";
// <- meta.block.fc.body meta.block.network
//^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//       ^^^^^^^^^^^^^^ meta.operand.datablock
//                     ^^ - meta.operand.datablock
//    ^^^ keyword.operator.load.db
//          ^^^^^^^^^^^ variable.other.global
//          ^ punctuation.definition.variable.begin
//                    ^ punctuation.definition.variable.end
//                     ^ punctuation.terminator.statement
      AUF   DBNO;
// <- meta.block.fc.body meta.block.network
//^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//       ^^^^^^^ meta.operand.datablock
//              ^^ - meta.operand.datablock
//    ^^^ keyword.operator.load.db
//          ^^^^ invalid.illegal
//              ^ punctuation.terminator.statement
      AUF   DINO;
// <- meta.block.fc.body meta.block.network
//^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//       ^^^^^^^ meta.operand.datablock
//              ^^ - meta.operand.datablock
//    ^^^ keyword.operator.load.db
//          ^^^^ invalid.illegal
//              ^ punctuation.terminator.statement
      TDB   ;
// <- meta.block.fc.body meta.block.network
//^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^^^ keyword.operator.db
//          ^ punctuation.terminator.statement

///////////////////////////////////////////////////////////////////////////////
// logical operations                                                        //
///////////////////////////////////////////////////////////////////////////////

      U     E3.0;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^^^^^ meta.operand.logical
//              ^^ - meta.operand
//    ^ keyword.operator.logical
//          ^^^^ variable.language.address
//            ^ punctuation.separator.decimal
//              ^ punctuation.terminator.statement
//               ^ - invalid
      U     A3.0;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^^^^^ meta.operand.logical
//              ^^ - meta.operand
//    ^ keyword.operator.logical
//          ^^^^ variable.language.address
//            ^ punctuation.separator.decimal
//              ^ punctuation.terminator.statement
//               ^ - invalid
      U     L3.0;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^^^^^ meta.operand.logical
//              ^^ - meta.operand
//    ^ keyword.operator.logical
//          ^^^^ variable.language.address
//            ^ punctuation.separator.decimal
//              ^ punctuation.terminator.statement
//               ^ - invalid
      U     M3.0;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^^^^^ meta.operand.logical
//              ^^ - meta.operand
//    ^ keyword.operator.logical
//          ^^^^ variable.language.address
//            ^ punctuation.separator.decimal
//              ^ punctuation.terminator.statement
//               ^ - invalid
      U     DBX3.0;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^^^^^^^ meta.operand.logical
//                ^^ - meta.operand
//    ^ keyword.operator.logical
//          ^^^^^^ variable.language.address
//              ^ punctuation.separator.decimal
//                ^ punctuation.terminator.statement
//                 ^ - invalid
      U     DIX3.0;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^^^^^^^ meta.operand.logical
//                ^^ - meta.operand
//    ^ keyword.operator.logical
//          ^^^^^^ variable.language.address
//              ^ punctuation.separator.decimal
//                ^ punctuation.terminator.statement
//                 ^ - invalid
      U     DB10.DBX3.0;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^^^^^^^^^^^^ meta.operand.logical
//                     ^^ - meta.operand
//    ^ keyword.operator.logical
//          ^^^^ variable.language.db
//              ^ punctuation.accessor.dot
//               ^^^^^^ variable.language.address
//                   ^ punctuation.separator.decimal
//                     ^ punctuation.terminator.statement
//                      ^ - invalid

///////////////////////////////////////////////////////////////////////////////
// load values into akku1                                                    //
///////////////////////////////////////////////////////////////////////////////
      L    MB10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.statement
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    MB[ LD0 ]; // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^ meta.operand.numeric
//           ^^^^^^^ meta.brackets
//    ^ keyword.operator.arithmetic.load
//         ^^ variable.language.address
//           ^ punctuation.section.brackets.begin
//             ^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    MW10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.statement
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    MW[ LD0 ]; // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^ meta.operand.numeric
//           ^^^^^^^ meta.brackets
//    ^ keyword.operator.arithmetic.load
//         ^^ variable.language.address
//           ^ punctuation.section.brackets.begin
//             ^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    MD10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.statement
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    MD[ LD0 ]; // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^ meta.operand.numeric
//           ^^^^^^^ meta.brackets
//    ^ keyword.operator.arithmetic.load
//         ^^ variable.language.address
//           ^ punctuation.section.brackets.begin
//             ^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    M10.0;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ invalid.illegal
//              ^ punctuation.terminator.statement
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L    LB10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.statement
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    LB[ LD0 ]; // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^ meta.operand.numeric
//           ^^^^^^^ meta.brackets
//    ^ keyword.operator.arithmetic.load
//         ^^ variable.language.address
//           ^ punctuation.section.brackets.begin
//             ^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    LW10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.statement
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    LW[ LD0 ]; // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^ meta.operand.numeric
//           ^^^^^^^ meta.brackets
//    ^ keyword.operator.arithmetic.load
//         ^^ variable.language.address
//           ^ punctuation.section.brackets.begin
//             ^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    LD10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ variable.language.address
//             ^ punctuation.terminator.statement
//                ^^ punctuation.definition.comment.begin
//                ^^^^^^^^^^ comment.line.double-slash
      L    LD[ LD0 ]; // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^ meta.operand.numeric
//           ^^^^^^^ meta.brackets
//    ^ keyword.operator.arithmetic.load
//         ^^ variable.language.address
//           ^ punctuation.section.brackets.begin
//             ^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    L10.0;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ invalid.illegal
//              ^ punctuation.terminator.statement
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L     T 10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^ variable.language.timer
//              ^ punctuation.terminator.statement
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L     T [MW10];  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^ meta.operand.numeric - meta.address
//          ^^ meta.operand.numeric meta.address.indirect - meta.brackets
//            ^^^^^^ meta.address.indirect meta.brackets
//                  ^^^^^^^^^^^^^^ - meta.operand
//    ^ keyword.operator.arithmetic.load
//          ^ variable.language.timer
//            ^ punctuation.section.brackets.begin
//             ^^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L     Z 10;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^ variable.language.counter
//              ^ punctuation.terminator.statement
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L     Z [MW10];  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//     ^^^^^ meta.operand.numeric - meta.address
//          ^^ meta.operand.numeric meta.address.indirect - meta.brackets
//            ^^^^^^ meta.address.indirect meta.brackets
//                  ^^^^^^^^^^^^^^ - meta.operand
//    ^ keyword.operator.arithmetic.load
//          ^ variable.language.counter
//            ^ punctuation.section.brackets.begin
//             ^^^^ variable.language.address
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L     DBNO;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^ variable.language
//              ^ punctuation.terminator.statement
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L     DINO;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^ variable.language
//              ^ punctuation.terminator.statement
//                 ^^ punctuation.definition.comment.begin
//                 ^^^^^^^^^^ comment.line.double-slash
      L     DBB  140;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^^ variable.language.address
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L     DBW  140;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^^ variable.language.address
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L     DBD  140;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^^ variable.language.address
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L     DIB  140;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^^ variable.language.address
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L     DIW  140;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^^ variable.language.address
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L     DID  140;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^^ variable.language.address
//                  ^ punctuation.terminator.statement
//                     ^^ punctuation.definition.comment.begin
//                     ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBB20;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ variable.language.db
//              ^ punctuation.accessor.dot
//               ^^^^^ variable.language.address
//                    ^ punctuation.terminator.statement
//                       ^^ punctuation.definition.comment.begin
//                       ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBW20;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ variable.language.db
//              ^ punctuation.accessor.dot
//               ^^^^^ variable.language.address
//                    ^ punctuation.terminator.statement
//                       ^^ punctuation.definition.comment.begin
//                       ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBD20;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ variable.language.db
//              ^ punctuation.accessor.dot
//               ^^^^^ variable.language.address
//                    ^ punctuation.terminator.statement
//                       ^^ punctuation.definition.comment.begin
//                       ^^^^^^^^^^ comment.line.double-slash
      L    DB200.DBX20.0;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^ invalid.illegal
//                      ^ punctuation.terminator.statement
//                         ^^ punctuation.definition.comment.begin
//                         ^^^^^^^^^^ comment.line.double-slash
      L    "datablock".struct[ 4 ].value;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.path
//    ^ keyword.operator.arithmetic.load
//         ^ punctuation.definition.variable.begin
//         ^^^^^^^^^^^ variable.namespace.datablock
//                   ^ punctuation.definition.variable.end
//                    ^ punctuation.accessor.dot
//                     ^^^^^^ variable.namespace.struct
//                           ^ punctuation.section.brackets.begin
//                           ^^^^^ meta.brackets
//                             ^ meta.number.integer constant.numeric.value
//                               ^ punctuation.section.brackets.end
//                                ^ punctuation.accessor.dot
//                                 ^^^^^ variable.other.member
//                                      ^ punctuation.terminator.statement
//                                         ^^ punctuation.definition.comment.begin
//                                         ^^^^^^^^^^ comment.line.double-slash
      L    "datablock".struct.value;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//         ^^^^^^^^^^^^^^^^^^^^^^^^ meta.path
//    ^ keyword.operator.arithmetic.load
//         ^ punctuation.definition.variable.begin
//         ^^^^^^^^^^^ variable.namespace.datablock
//                   ^ punctuation.definition.variable.end
//                    ^ punctuation.accessor.dot
//                     ^^^^^^ variable.namespace.struct
//                           ^ punctuation.accessor.dot
//                            ^^^^^ variable.other.member
//                                 ^ punctuation.terminator.statement
//                                    ^^ punctuation.definition.comment.begin
//                                    ^^^^^^^^^^ comment.line.double-slash
      L    #local[1].array[0].value[ 10 ];  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^ punctuation.definition.variable
//         ^^^^^^ variable.namespace.struct
//               ^ punctuation.section.brackets.begin
//               ^^^ meta.brackets
//                ^ meta.number.integer constant.numeric.value
//                 ^ punctuation.section.brackets.end
//                  ^ punctuation.accessor.dot
//                   ^^^^^ variable.namespace.struct
//                        ^ punctuation.section.brackets.begin
//                        ^^^ meta.brackets
//                         ^ meta.number.integer constant.numeric.value
//                          ^ punctuation.section.brackets.end
//                           ^ punctuation.accessor.dot
//                            ^^^^^ variable.other.member
//                                 ^ punctuation.section.brackets.begin
//                                 ^^^^^^ meta.brackets
//                                   ^^ meta.number.integer constant.numeric.value
//                                      ^ punctuation.section.brackets.end
//                                       ^ punctuation.terminator.statement
//                                          ^^ punctuation.definition.comment.begin
//                                          ^^^^^^^^^^ comment.line.double-slash
      L    P# P0.0; // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^ constant.language.pointer
//         ^ storage.type.pointer
//          ^ punctuation.separator.type
//              ^ punctuation.separator.decimal
//                ^ punctuation.terminator.statement
//                  ^^ punctuation.definition.comment.begin
//                  ^^^^^^^^^^ comment.line.double-slash
      L    P##local;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^ storage.type.pointer
//          ^ punctuation.separator.type
//           ^ punctuation.definition.variable
//            ^^^^^ variable.other.local
//                 ^ punctuation.terminator.statement
//                    ^^ punctuation.definition.comment.begin
//                    ^^^^^^^^^^ comment.line.double-slash
      L    P#120.4;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^ constant.language.pointer
//         ^ storage.type.pointer
//          ^ punctuation.separator.type
//                ^ punctuation.terminator.statement
//                   ^^ punctuation.definition.comment.begin
//                   ^^^^^^^^^^ comment.line.double-slash
      L    P#DBX120.4;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^ constant.language.pointer
//         ^ storage.type.pointer
//          ^ punctuation.separator.type
//                 ^ punctuation.separator.decimal
//                   ^ punctuation.terminator.statement
//                      ^^ punctuation.definition.comment.begin
//                      ^^^^^^^^^^ comment.line.double-slash
      L    P#DB2.DBX120.4;  // comment
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^ constant.language.pointer
//         ^ storage.type.pointer
//          ^ punctuation.separator.type
//              ^ punctuation.accessor.dot
//                     ^ punctuation.separator.decimal
//                       ^ punctuation.terminator.statement
//                          ^^ punctuation.definition.comment.begin
//                          ^^^^^^^^^^ comment.line.double-slash
      L    2#0000_0000_0000_0000_0000_0000_0000_0000 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.number.integer.binary
//         ^ constant.numeric.base - punctuation
//          ^ constant.numeric.base punctuation.separator.base
//           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.numeric.value
//               ^ punctuation.separator.digits
//                    ^ punctuation.separator.digits
//                         ^ punctuation.separator.digits
//                              ^ punctuation.separator.digits
//                                   ^ punctuation.separator.digits
//                                        ^ punctuation.separator.digits
//                                             ^ punctuation.separator.digits
//                                                  ^ - invalid
//                                                   ^ punctuation.terminator.statement
//                                                    ^ - invalid
      L    2#1111_1111_1111_1111_1111_1111_1111_1111 ;
// <- meta.block.fc.body meta.block.network
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.number.integer.binary
//         ^ constant.numeric.base - punctuation
//          ^ constant.numeric.base punctuation.separator.base
//           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.numeric.value
//               ^ punctuation.separator.digits
//                    ^ punctuation.separator.digits
//                         ^ punctuation.separator.digits
//                              ^ punctuation.separator.digits
//                                   ^ punctuation.separator.digits
//                                        ^ punctuation.separator.digits
//                                             ^ punctuation.separator.digits
//                                                  ^ - invalid
//                                                   ^ punctuation.terminator.statement
//                                                    ^ - invalid
      L    2#1121_1111_1A11_1111_111_11011_1111_1111 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.number.integer.binary
//         ^ constant.numeric.base - punctuation
//          ^ constant.numeric.base punctuation.separator.base
//           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.numeric.value
//             ^ invalid.illegal.digits
//               ^ punctuation.separator.digits
//                    ^ punctuation.separator.digits
//                      ^ invalid.illegal.digits
//                         ^ punctuation.separator.digits
//                              ^ punctuation.separator.digits
//                                  ^ punctuation.separator.digits
//                                        ^ punctuation.separator.digits
//                                             ^ punctuation.separator.digits
//                                                  ^ - invalid
//                                                   ^ punctuation.terminator.statement
//                                                    ^ - invalid
      L    B#16#0 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^ meta.number.integer.hexadecimal
//         ^ storage.type.integer
//          ^ punctuation.separator.type
//           ^^ constant.numeric.base - punctuation
//             ^ constant.numeric.base punctuation.separator.base
//              ^ constant.numeric.value
//               ^ - invalid
//                ^ punctuation.terminator.statement
//                 ^ - invalid
      L    byte#16#0 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^ meta.number.integer.hexadecimal
//         ^^^^ storage.type.integer
//             ^ punctuation.separator.type
//              ^^ constant.numeric.base - punctuation
//                ^ constant.numeric.base punctuation.separator.base
//                 ^ constant.numeric.value
//                  ^ - invalid
//                   ^ punctuation.terminator.statement
//                    ^ - invalid
      L    W#16#0 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^ meta.number.integer.hexadecimal
//         ^ storage.type.integer
//          ^ punctuation.separator.type
//           ^^ constant.numeric.base - punctuation
//             ^ constant.numeric.base punctuation.separator.base
//              ^ constant.numeric.value
//               ^ - invalid
//                ^ punctuation.terminator.statement
//                 ^ - invalid
      L    word#16#0 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^ meta.number.integer.hexadecimal
//         ^^^^ storage.type.integer
//             ^ punctuation.separator.type
//              ^^ constant.numeric.base - punctuation
//                ^ constant.numeric.base punctuation.separator.base
//                 ^ constant.numeric.value
//                  ^ - invalid
//                   ^ punctuation.terminator.statement
//                    ^ - invalid
      L    DW#16#0 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^ meta.number.integer.hexadecimal
//         ^^ storage.type.integer
//           ^ punctuation.separator.type
//            ^^ constant.numeric.base - punctuation
//              ^ constant.numeric.base punctuation.separator.base
//               ^ constant.numeric.value
//                ^ - invalid
//                 ^ punctuation.terminator.statement
//                  ^ - invalid
      L    dword#16#0 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^ meta.number.integer.hexadecimal
//         ^^^^^ storage.type.integer
//              ^ punctuation.separator.type
//               ^^ constant.numeric.base - punctuation
//                 ^ constant.numeric.base punctuation.separator.base
//                  ^ constant.numeric.value
//                   ^ - invalid
//                    ^ punctuation.terminator.statement
//                     ^ - invalid
      L    16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^ meta.number.integer.decimal
//         ^^ constant.numeric.value
//           ^ - invalid
//            ^ punctuation.terminator.statement
//             ^ - invalid
      L    -16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^ meta.number.integer.decimal
//         ^ keyword.operator.arithmetic - constant.numeric.value
//          ^^ constant.numeric.value - keyword.operator
//            ^ - invalid
//             ^ punctuation.terminator.statement
//              ^ - invalid
      L    L#16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^ meta.number.integer.decimal
//         ^ storage.type.integer
//          ^ punctuation.separator.type
//           ^^ constant.numeric.value
//             ^ - invalid
//              ^ punctuation.terminator.statement
//               ^ - invalid
      L    L#-16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ meta.number.integer.decimal
//         ^ storage.type.integer
//          ^ punctuation.separator.type
//           ^ keyword.operator.arithmetic - constant.numeric.value
//            ^^ constant.numeric.value - keyword.operator
//              ^ - invalid
//               ^ punctuation.terminator.statement
//                ^ - invalid
      L    2.0323e+002 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^ meta.number.float.decimal constant.numeric.value
//          ^ punctuation.separator.decimal
//                    ^ - invalid
//                     ^ punctuation.terminator.statement
//                      ^ - invalid
      L    -2.0323e-002 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^ meta.number.float.decimal
//         ^ keyword.operator.arithmetic - constant.numeric.value
//          ^^^^^^^^^^^ constant.numeric.value - keyword.operator
//           ^ punctuation.separator.decimal
//                     ^ - invalid
//                      ^ punctuation.terminator.statement
//                       ^ - invalid
      L    C#200 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^ meta.number.counter.s5
//         ^ storage.type.counter
//          ^ punctuation.separator.type
//           ^^^ constant.numeric.value
//              ^ - invalid
//               ^ punctuation.terminator.statement
//                ^ - invalid
      L     S5T#50MS ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^^ meta.number.time.s5
//          ^^^ storage.type.time
//             ^ punctuation.separator.type
//              ^^ constant.numeric.value.millisecond
//                ^^ constant.numeric.suffix
//                  ^ - invalid
//                   ^ punctuation.terminator.statement
//                    ^ - invalid
      L     S5T#50S ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^ meta.number.time.s5
//          ^^^ storage.type.time
//             ^ punctuation.separator.type
//              ^^ constant.numeric.value.second
//                ^ constant.numeric.suffix
//                 ^ - invalid
//                  ^ punctuation.terminator.statement
//                   ^ - invalid
      L     S5T#50M ; //Lade 3000s Sekunden
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^^ meta.number.time.s5
//          ^^^ storage.type.time
//             ^ punctuation.separator.type
//              ^^ constant.numeric.value.minute
//                ^ constant.numeric.suffix
//                 ^ - invalid
//                  ^ punctuation.terminator.statement
//                   ^ - invalid
//                    ^^^^^^^^^^^^^^^^^^^^^ comment.line
      L     S5T#1H ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^ meta.number.time.s5
//          ^^^ storage.type.time
//             ^ punctuation.separator.type
//              ^ constant.numeric.value.hour
//               ^ constant.numeric.suffix
//                ^ - invalid
//                 ^ punctuation.terminator.statement
//                  ^ - invalid
      L    S5T#2H_30M_58S_200MS ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^ meta.number.time.s5
//         ^^^ storage.type.time
//            ^ punctuation.separator.type
//             ^ constant.numeric.value.hour
//              ^ constant.numeric.suffix
//               ^ punctuation.separator.time
//                ^^ constant.numeric.value.minute
//                  ^ constant.numeric.suffix
//                   ^ punctuation.separator.time
//                    ^^ constant.numeric.value.second
//                      ^ constant.numeric.suffix
//                       ^ punctuation.separator.time
//                        ^^^ constant.numeric.value.millisecond
//                           ^^ constant.numeric.suffix
//                             ^ - invalid
//                              ^ punctuation.terminator.statement
//                               ^ - invalid
      L    S5T#2H_70M_58S_200MS ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^ meta.number.time.s5
//         ^^^ storage.type.time
//            ^ punctuation.separator.type
//             ^ constant.numeric.value.hour
//              ^ constant.numeric.suffix
//               ^ punctuation.separator.time
//                ^^ constant.numeric.value.minute.plc
//                  ^ constant.numeric.suffix.minute.plc
//                   ^ punctuation.separator.time
//                    ^^ constant.numeric.value.second
//                      ^ constant.numeric.suffix
//                       ^ punctuation.separator.time
//                        ^^^ constant.numeric.value.millisecond
//                           ^^ constant.numeric.suffix
//                             ^ - invalid
//                              ^ punctuation.terminator.statement
//                               ^ - invalid
      L     T#50MS ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^^ meta.number.time.iec
//          ^ storage.type.time
//           ^ punctuation.separator.type
//            ^^ constant.numeric.value.millisecond
//              ^^ constant.numeric.suffix
//                ^ - invalid
//                 ^ punctuation.terminator.statement
//                  ^ - invalid
      L     T#50S ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^ meta.number.time.iec
//          ^ storage.type.time
//           ^ punctuation.separator.type
//            ^^ constant.numeric.value.second
//              ^ constant.numeric.suffix
//               ^ - invalid
//                ^ punctuation.terminator.statement
//                 ^ - invalid
      L     T#50M ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^^ meta.number.time.iec
//          ^ storage.type.time
//           ^ punctuation.separator.type
//            ^^ constant.numeric.value.minute
//              ^ constant.numeric.suffix
//               ^ - invalid
//                ^ punctuation.terminator.statement
//                 ^ - invalid
      L     T#1H ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^ meta.number.time.iec
//          ^ storage.type.time
//           ^ punctuation.separator.type
//            ^ constant.numeric.value.hour
//             ^ constant.numeric.suffix
//              ^ - invalid
//               ^ punctuation.terminator.statement
//                ^ - invalid
      L     T#2D ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//          ^^^^ meta.number.time.iec
//          ^ storage.type.time
//           ^ punctuation.separator.type
//            ^ constant.numeric.value.day
//             ^ constant.numeric.suffix
//              ^ - invalid
//               ^ punctuation.terminator.statement
//                ^ - invalid
      L    T#24D_23H_59M_59S_999MS ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^^^^ meta.number.time.iec
//         ^ storage.type.time
//          ^ punctuation.separator.type
//           ^^ constant.numeric.value.day
//             ^ constant.numeric.suffix
//              ^ punctuation.separator.time
//               ^^ constant.numeric.value.hour
//                 ^ constant.numeric.suffix
//                  ^ punctuation.separator.time
//                   ^^ constant.numeric.value.minute
//                     ^ constant.numeric.suffix
//                      ^ punctuation.separator.time
//                       ^^ constant.numeric.value.second
//                         ^ constant.numeric.suffix
//                          ^ punctuation.separator.time
//                           ^^^ constant.numeric.value.millisecond
//                              ^^ constant.numeric.suffix
//                                ^ - invalid
//                                 ^ punctuation.terminator.statement
//                                  ^ - invalid
      L    T#25D_23H_69M_59S_999MS ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^^^^ meta.number.time.iec
//         ^ storage.type.time
//          ^ punctuation.separator.type
//           ^^^ invalid.illegal.time.day
//              ^ punctuation.separator.time
//               ^^ constant.numeric.value.hour
//                 ^ constant.numeric.suffix
//                  ^ punctuation.separator.time
//                   ^^ constant.numeric.value.minute.plc
//                     ^ constant.numeric.suffix.minute.plc
//                      ^ punctuation.separator.time
//                       ^^ constant.numeric.value.second
//                         ^ constant.numeric.suffix
//                          ^ punctuation.separator.time
//                           ^^^ constant.numeric.value.millisecond
//                              ^^ constant.numeric.suffix
//                                ^ - invalid
//                                 ^ punctuation.terminator.statement
//                                  ^ - invalid
      L    t#25d_23h_69m_59s_999ms ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^^^^ meta.number.time.iec
//         ^ storage.type.time
//          ^ punctuation.separator.type
//           ^^^ invalid.illegal.time.day
//              ^ punctuation.separator.time
//               ^^ constant.numeric.value.hour
//                 ^ constant.numeric.suffix
//                  ^ punctuation.separator.time
//                   ^^ constant.numeric.value.minute.plc
//                     ^ constant.numeric.suffix.minute.plc
//                      ^ punctuation.separator.time
//                       ^^ constant.numeric.value.second
//                         ^ constant.numeric.suffix
//                          ^ punctuation.separator.time
//                           ^^^ constant.numeric.value.millisecond
//                              ^^ constant.numeric.suffix
//                                ^ - invalid
//                                 ^ punctuation.terminator.statement
//                                  ^ - invalid
      L    T#24D_23M_59M_20H_999MS ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^^^^^^^^ meta.number.time.iec
//         ^ storage.type.time
//          ^ punctuation.separator.type
//           ^^ constant.numeric.value.day
//             ^ constant.numeric.suffix
//              ^ punctuation.separator.time
//               ^^^ invalid.illegal.time.hour
//                  ^ punctuation.separator.time
//                   ^^ constant.numeric.value.minute
//                     ^ constant.numeric.suffix
//                      ^ punctuation.separator.time
//                       ^^^ invalid.illegal.time.second
//                          ^ punctuation.separator.time
//                           ^^^ constant.numeric.value.millisecond
//                              ^^ constant.numeric.suffix
//                                ^ - invalid
//                                 ^ punctuation.terminator.statement
//                                  ^ - invalid

      L    LT#999ns LT#-999ns LT#+999ns
//         ^^^^^^^^ meta.number.time.iec.plc
//         ^^ storage.type.time.plc
//           ^ punctuation.separator.type.plc
//            ^^^ constant.numeric.value.nanosecond.plc
//               ^^ constant.numeric.suffix.nanosecond.plc
//                  ^^^^^^^^^ meta.number.time.iec.plc
//                  ^^ storage.type.time.plc
//                    ^ punctuation.separator.type.plc
//                     ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//                      ^^^ constant.numeric.value.nanosecond.plc
//                         ^^ constant.numeric.suffix.nanosecond.plc
//                            ^^^^^^^^^ meta.number.time.iec.plc
//                            ^^ storage.type.time.plc
//                              ^ punctuation.separator.type.plc
//                               ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//                                ^^^ constant.numeric.value.nanosecond.plc
//                                   ^^ constant.numeric.suffix.nanosecond.plc

      L    LT#999us LT#-999us LT#+999us
//         ^^^^^^^^ meta.number.time.iec.plc
//         ^^ storage.type.time.plc
//           ^ punctuation.separator.type.plc
//            ^^^ constant.numeric.value.microsecond.plc
//               ^^ constant.numeric.suffix.microsecond.plc
//                  ^^^^^^^^^ meta.number.time.iec.plc
//                  ^^ storage.type.time.plc
//                    ^ punctuation.separator.type.plc
//                     ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//                      ^^^ constant.numeric.value.microsecond.plc
//                         ^^ constant.numeric.suffix.microsecond.plc
//                            ^^^^^^^^^ meta.number.time.iec.plc
//                            ^^ storage.type.time.plc
//                              ^ punctuation.separator.type.plc
//                               ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//                                ^^^ constant.numeric.value.microsecond.plc
//                                   ^^ constant.numeric.suffix.microsecond.plc

      L    LT#999ms LT#-999ms LT#+999ms
//         ^^^^^^^^ meta.number.time.iec.plc
//         ^^ storage.type.time.plc
//           ^ punctuation.separator.type.plc
//            ^^^ constant.numeric.value.millisecond.plc
//               ^^ constant.numeric.suffix.millisecond.plc
//                  ^^^^^^^^^ meta.number.time.iec.plc
//                  ^^ storage.type.time.plc
//                    ^ punctuation.separator.type.plc
//                     ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//                      ^^^ constant.numeric.value.millisecond.plc
//                         ^^ constant.numeric.suffix.millisecond.plc
//                            ^^^^^^^^^ meta.number.time.iec.plc
//                            ^^ storage.type.time.plc
//                              ^ punctuation.separator.type.plc
//                               ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//                                ^^^ constant.numeric.value.millisecond.plc
//                                   ^^ constant.numeric.suffix.millisecond.plc

      L    LT#-106751d_23h_47m_16s_854ms_775us_808ns
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.number.time.iec.plc - invalid
//         ^^ storage.type.time.plc
//           ^ punctuation.separator.type.plc
//            ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//             ^^^^^^ constant.numeric.value.day.plc
//                   ^ constant.numeric.suffix.day.plc
//                    ^ punctuation.separator.time.plc
//                     ^^ constant.numeric.value.hour.plc
//                       ^ constant.numeric.suffix.hour.plc
//                        ^ punctuation.separator.time.plc
//                         ^^ constant.numeric.value.minute.plc
//                           ^ constant.numeric.suffix.minute.plc
//                            ^ punctuation.separator.time.plc
//                             ^^ constant.numeric.value.second.plc
//                               ^ constant.numeric.suffix.second.plc
//                                ^ punctuation.separator.time.plc
//                                 ^^^ constant.numeric.value.millisecond.plc
//                                    ^^ constant.numeric.suffix.millisecond.plc
//                                      ^ punctuation.separator.time.plc
//                                       ^^^ constant.numeric.value.microsecond.plc
//                                          ^^ constant.numeric.suffix.microsecond.plc
//                                            ^ punctuation.separator.time.plc
//                                             ^^^ constant.numeric.value.nanosecond.plc
//                                                ^^ constant.numeric.suffix.nanosecond.plc

      L    LT#+106751d_23h_47m_16s_854ms_775us_807ns
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.number.time.iec.plc - invalid
//         ^^ storage.type.time.plc
//           ^ punctuation.separator.type.plc
//            ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//             ^^^^^^ constant.numeric.value.day.plc
//                   ^ constant.numeric.suffix.day.plc
//                    ^ punctuation.separator.time.plc
//                     ^^ constant.numeric.value.hour.plc
//                       ^ constant.numeric.suffix.hour.plc
//                        ^ punctuation.separator.time.plc
//                         ^^ constant.numeric.value.minute.plc
//                           ^ constant.numeric.suffix.minute.plc
//                            ^ punctuation.separator.time.plc
//                             ^^ constant.numeric.value.second.plc
//                               ^ constant.numeric.suffix.second.plc
//                                ^ punctuation.separator.time.plc
//                                 ^^^ constant.numeric.value.millisecond.plc
//                                    ^^ constant.numeric.suffix.millisecond.plc
//                                      ^ punctuation.separator.time.plc
//                                       ^^^ constant.numeric.value.microsecond.plc
//                                          ^^ constant.numeric.suffix.microsecond.plc
//                                            ^ punctuation.separator.time.plc
//                                             ^^^ constant.numeric.value.nanosecond.plc
//                                                ^^ constant.numeric.suffix.nanosecond.plc

      L    LT#+106752d_23h_47m_16s_854ms_775us_807ns
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.number.time.iec.plc
//         ^^ storage.type.time.plc
//           ^ punctuation.separator.type.plc
//            ^ constant.numeric.value.plc keyword.operator.arithmetic.plc
//             ^^^^^^^ invalid.illegal.time.day.plc
//                    ^ punctuation.separator.time.plc
//                     ^^ constant.numeric.value.hour.plc
//                       ^ constant.numeric.suffix.hour.plc
//                        ^ punctuation.separator.time.plc
//                         ^^ constant.numeric.value.minute.plc
//                           ^ constant.numeric.suffix.minute.plc
//                            ^ punctuation.separator.time.plc
//                             ^^ constant.numeric.value.second.plc
//                               ^ constant.numeric.suffix.second.plc
//                                ^ punctuation.separator.time.plc
//                                 ^^^ constant.numeric.value.millisecond.plc
//                                    ^^ constant.numeric.suffix.millisecond.plc
//                                      ^ punctuation.separator.time.plc
//                                       ^^^ constant.numeric.value.microsecond.plc
//                                          ^^ constant.numeric.suffix.microsecond.plc
//                                            ^ punctuation.separator.time.plc
//                                             ^^^ constant.numeric.value.nanosecond.plc
//                                                ^^ constant.numeric.suffix.nanosecond.plc

      L    DT#1970-01-01-00:00:00 ;
//         ^^^^^^^^^^^^^^^^^^^^^^ meta.number.date-and-time.plc
//         ^^ storage.type.time.plc
//           ^ punctuation.separator.type.plc
//            ^^^^^^^^^^^^^^^^^^^ constant.numeric.value.plc
//                ^ punctuation.separator.date.plc
//                   ^ punctuation.separator.date.plc
//                         ^ punctuation.separator.time.plc
//                            ^ punctuation.separator.time.plc

      L    LDT#1970-01-01-00:00:00 ;
//         ^^^^^^^^^^^^^^^^^^^^^^^ meta.number.date-and-time.plc
//         ^^^ storage.type.time.plc
//            ^ punctuation.separator.type.plc
//             ^^^^^^^^^^^^^^^^^^^ constant.numeric.value.plc
//                 ^ punctuation.separator.date.plc
//                    ^ punctuation.separator.date.plc
//                          ^ punctuation.separator.time.plc
//                             ^ punctuation.separator.time.plc

      L    D#2017-12-30 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^ meta.number.date
//         ^ storage.type.time
//          ^ punctuation.separator.type
//           ^^^^^^^^^^ constant.numeric.value
//               ^ punctuation.separator.date
//                  ^ punctuation.separator.date
//                     ^ - invalid
//                      ^ punctuation.terminator.statement
//                       ^ - invalid

      L    DATE#2017-12-30 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^ meta.number.date
//         ^^^^ storage.type.time
//             ^ punctuation.separator.type
//              ^^^^^^^^^^ constant.numeric.value
//                  ^ punctuation.separator.date
//                     ^ punctuation.separator.date
//                        ^ - invalid
//                         ^ punctuation.terminator.statement
//                          ^ - invalid

      L    LDATE#2162-12-30 ;
//         ^^^^^^^^^^^^^^^^ meta.number.date.plc
//         ^^^^^ storage.type.time.plc
//              ^ punctuation.separator.type.plc
//               ^^^^^^^^^^ constant.numeric.value.plc
//                   ^ punctuation.separator.date.plc
//                      ^ punctuation.separator.date.plc
//                         ^ - invalid
//                          ^ punctuation.terminator.statement.plc
//                           ^ - invalid

      L    TOD#23:59:59.999 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic.load
//         ^^^^^^^^^^^^^^^^ meta.number.time-of-day
//         ^^^ storage.type.time
//            ^ punctuation.separator.type
//             ^^^^^^^^^^^^ constant.numeric.value
//               ^ punctuation.separator.time
//                  ^ punctuation.separator.time
//                     ^ punctuation.separator.time
//                         ^ - invalid
//                          ^ punctuation.terminator.statement
//                           ^ - invalid

      L    LTOD#23:59:59.999 ;
//         ^^^^^^^^^^^^^^^^^ meta.number.time-of-day.plc
//         ^^^^ storage.type.time.plc
//             ^ punctuation.separator.type.plc
//              ^^^^^^^^^^^^ constant.numeric.value.plc
//                ^ punctuation.separator.time.plc
//                   ^ punctuation.separator.time.plc
//                      ^ punctuation.separator.time.plc
//                          ^ - invalid
//                           ^ punctuation.terminator.statement.plc
//                            ^ - invalid

      L    'A'
//    ^ keyword.operator.arithmetic.load
//         ^^^ meta.string string.quoted.single
//         ^ punctuation.definition.string.begin
//          ^ constant.character.literal
//           ^ punctuation.definition.string.end

///////////////////////////////////////////////////////////////////////////////
// aritmetic operations                                                      //
///////////////////////////////////////////////////////////////////////////////

      +    16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic
//         ^^ meta.number.integer.decimal
//         ^^ constant.numeric.value
//           ^ - invalid
//            ^ punctuation.terminator.statement
//             ^ - invalid
      +    -16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic
//         ^^^ meta.number.integer.decimal
//         ^ keyword.operator.arithmetic - constant.numeric.value
//          ^^ constant.numeric.value - keyword.operator
//            ^ - invalid
//             ^ punctuation.terminator.statement
//              ^ - invalid
      +    L#16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic
//         ^^^^ meta.number.integer.decimal
//         ^ storage.type.integer
//          ^ punctuation.separator.type
//           ^^ constant.numeric.value
//             ^ - invalid
//              ^ punctuation.terminator.statement
//               ^ - invalid
      +    L#-16 ;
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^ keyword.operator.arithmetic
//         ^^^^^ meta.number.integer.decimal
//         ^ storage.type.integer
//          ^ punctuation.separator.type
//           ^ keyword.operator.arithmetic - constant.numeric.value
//            ^^ constant.numeric.value - keyword.operator
//              ^ - invalid
//               ^ punctuation.terminator.statement
//                ^ - invalid

///////////////////////////////////////////////////////////////////////////////
// function calls                                                            //
///////////////////////////////////////////////////////////////////////////////

      CALL "ALARM_SQ" (
// <- meta.block.fc.body meta.block.network
// ^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network
//    ^^^^ meta.function-call - meta.function-call meta.function-call
//        ^^^^^^^^^^^^ meta.function-call.identifier - meta.function-call meta.function-call
//                    ^ meta.function-call.arguments - meta.function-call meta.function-call
//    ^^^^ keyword.control.call
//         ^ variable.function.global punctuation.definition.variable.begin
//          ^^^^^^^^ variable.function.global - punctuation
//                  ^ variable.function.global punctuation.definition.variable.end
//                    ^ punctuation.section.group.begin
           EN      := L 4.0,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^^ variable.language.address
//                         ^ punctuation.separator.sequence
           INTF    := DB 2,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^ variable.language.db
//                        ^ punctuation.separator.sequence
           TMR     := T 2,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^ variable.language.timer
//                       ^ punctuation.separator.sequence
           CNT     := Z 2,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^ variable.language.counter
//                       ^ punctuation.separator.sequence
           SIG     := "msgs".A700127,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^^^^^^^^^^^ meta.path
//                    ^^^^^^ variable.namespace.datablock
//                    ^ punctuation.definition.variable.begin
//                         ^ punctuation.definition.variable.end
//                          ^ punctuation.accessor
//                           ^^^^^^^ variable.other.member
//                                  ^ punctuation.separator.sequence
           ID      := W#16#EEEE,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^^^^^^ meta.number.integer.hexadecimal
//                             ^ punctuation.separator.sequence
           EV_ID   := DW#16#AAEDF,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^^^^^^^^ meta.number.integer.hexadecimal
//                               ^ punctuation.separator.sequence
           ANY     := P# DB20.DBX40.0 WORD 10,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//                                    ^^^^ storage.type
//         ^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^^^^^^^^^^^^^^^^^^^^ constant.language.any-pointer
//                                           ^ punctuation.separator.sequence
           OTHER   := NULL,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^ constant.language.null
//                        ^ punctuation.separator.sequence
           SD      := #data,
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^^ variable.other.local
//                    ^ punctuation.definition.variable
//                         ^ punctuation.separator.sequence
           "quoted:=arg" := 'value',
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^^^^^^^^^^^ variable.parameter.plc
//         ^ punctuation.definition.variable.begin.plc
//                     ^ punctuation.definition.variable.end.plc
//                       ^^ keyword.operator.assignment.plc
//                          ^^^^^^^ meta.string.plc string.quoted.single.plc

           RET_VAL := MW200);
// <- meta.block.fc.body meta.block.network meta.function-call.arguments
// ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.fc.body meta.block.network meta.function-call.arguments
//         ^^^^^^^ variable.parameter
//                 ^^ keyword.operator.assignment
//                    ^^^^^ variable.language.address
//                         ^ punctuation.section.group.end
//                          ^ punctuation.terminator.statement
   CALL #wdgPrgRead
   {time_type := 'Time'}
//^ meta.function-call.identifier.plc
// ^^^^^^^^^^^^^^^^^^^^^ meta.function-call.plc meta.annotation.plc
//                      ^ meta.function-call.plc - meta.annotation

   CALL #wdgPrgRead
   {time_type := 'Time'}
   (  IN := #interface.Platz.PrgReadReq ,
//^ meta.function-call.plc - meta.annotation - meta.group
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.plc meta.group.plc
// ^ punctuation.section.group.begin.plc
//    ^^ variable.parameter.plc
//       ^^ keyword.operator.assignment.plc
   );
//^^ meta.function-call.arguments.plc meta.group.plc
//  ^ - meta.function-call
// ^ punctuation.section.group.end.plc
//  ^ punctuation.terminator.statement.plc

   CALL FC 10 ();
// ^^^^ meta.function-call
//     ^^^^^^^ meta.function-call.identifier
//            ^^ meta.function-call.arguments
// ^^^^ keyword.control.call
//      ^^^^^ variable.function.address
//            ^ punctuation.section.group.begin
//             ^ punctuation.section.group.end

   CALL SFC 10 ();
// ^^^^ meta.function-call
//     ^^^^^^^^ meta.function-call.identifier
//             ^^ meta.function-call.arguments
// ^^^^ keyword.control.call
//      ^^^^^^ variable.function.address
//             ^ punctuation.section.group.begin
//              ^ punctuation.section.group.end

   CALL FB 10, DB 10 ();
// ^^^^ meta.function-call - meta.function-call meta.function-call
//     ^^^^^^ meta.function-call.identifier - meta.function-call meta.function-call
//           ^ meta.function-call - meta.function-call meta.function-call
//            ^^^^^^^ meta.function-call.instance - meta.function-call meta.function-call
//                   ^^ meta.function-call.arguments - meta.function-call meta.function-call
// ^^^^ keyword.control.call
//      ^^^^^ variable.function.address
//           ^ punctuation.separator.sequence
//             ^^^^^ variable.language.db
//                   ^ punctuation.section.group.begin
//                    ^ punctuation.section.group.end

   CALL "Block", "InstDB" ();
// ^^^^ meta.function-call - meta.function-call meta.function-call
//     ^^^^^^^^ meta.function-call.identifier - meta.function-call meta.function-call
//             ^ meta.function-call - meta.function-call meta.function-call
//              ^^^^^^^^^^ meta.function-call.instance - meta.function-call meta.function-call
//                        ^^ meta.function-call.arguments - meta.function-call meta.function-call
// ^^^^ keyword.control.call
//      ^ variable.function.global punctuation.definition.variable.begin
//       ^^^^^ variable.function.global - punctuation
//            ^ variable.function.global punctuation.definition.variable.end
//             ^ punctuation.separator.sequence
//               ^^^^^^^^ variable.other.global
//                        ^ punctuation.section.group.begin
//                         ^ punctuation.section.group.end

   END_FUNCTION
// ^^^^^^^^^^^^ meta.block.fc.body
// ^^^^^^^^^^^^ keyword.declaration.fc.end
