%YAML 1.2
# The MIT License (MIT)
#
# Copyright (c) 2016 DeathAxe <deathaxe82@googlemail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
###############################################################################
---
name: Step7 AWL
scope: source.plc.awl
version: 2

extends: Step7 PLC.sublime-syntax

file_extensions:
  - awl

contexts:

###[ BLOCK HEADERS ]###########################################################

  block-udt-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:UDT)\s*\d+\b
      scope: entity.name.type.plc
      pop: 1

  block-db-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:S?DB)\s*\d+\b
      scope: entity.name.datablock.plc
      pop: 1

  block-fb-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:S?F[BC])\s*\d+\b
      scope: entity.name.function.plc
      pop: 1

  block-ob-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:OB)\s*\d+\b
      scope: entity.name.type.plc
      pop: 1

  block-body-content:
    - include: awl-networks
    - include: awl-statements
    - include: illegal

###[ AWL NETWORKS ]############################################################

  awl-networks:
    - match: \b(?i:NETWORK)\b
      scope: keyword.control.network.plc
      push: [awl-network-body, title]

  awl-network-body:
    - meta_scope: meta.block.network.plc
    - match: (?=(?i:NETWORK|END_(?:FUNCTION(?:_BLOCK)?|ORGANIZATION_BLOCK))\b)
      pop: 1
    - include: awl-statements

###[ AWL STATEMENTS ]##########################################################

  awl-statements:
    - include: awl-stmt-label
    - include: awl-stmt-block
    - include: awl-stmt-logical
    - include: awl-stmt-assignment
    - include: awl-stmt-bitwise
    - include: awl-stmt-address-register
    - include: awl-stmt-arithmetic
    - include: awl-stmt-goto
    - include: awl-stmt-akku
    - include: awl-stmt-datablock
    - include: awl-stmt-call
    - include: awl-stmt-nop

  awl-stmt-label:
    - match: ^\s*(\w{1,4})(:)
      captures:
        1: entity.name.label.plc
        2: punctuation.terminator.label.plc

  awl-stmt-block:
    # U( , UN( , O(, ON( , X( , XN(
    - match: \b((?i:[OUX]N?))(\()
      captures:
        1: keyword.operator.logical.plc
        2: punctuation.section.block.begin.plc
      push: [awl-stmt-block-body, assert-stmt-end]

  awl-stmt-block-body:
    - meta_scope: meta.block.logical.plc
    - match: \)
      scope: punctuation.section.block.end.plc
      set: assert-stmt-end
    - include: awl-statements

  awl-stmt-nop:
    # NOP 0, BLD
    - match: \b(?i:BLD|NOP)\b
      scope: keyword.operator.nop.plc
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc
        - include: literals-uint16
        - include: assert-stmt-end

  awl-stmt-logical:
    # A, AN, U , UN , O, ON, X, XN, FP, FN
    - match: \b(?i:[AOUX]N?|F[PN])\b
      scope: keyword.operator.logical.plc
      push:
        - meta_content_scope: meta.operand.logical.plc
        - include: operands
        - include: assert-stmt-end
    - match: \b(?i:CLR|NOT|SAVE|SET)\b
      scope: keyword.operator.logical.vke.plc
      push: assert-stmt-end
    # ==I, ==D, <>I, <>D, <=I, <=D, >=I, >=D, <I, <D, >I, >D
    - match: (?:==|<>|<=|>=|<|>)[IDR]
      scope: keyword.operator.logical.plc
      push: assert-stmt-end

  awl-stmt-bitwise:
    # AW, AD, UW, UD, OW, OD, XOW, XOD
    - match: \b(?i:[AOU]|XO)[WD]\b
      scope: keyword.operator.bitwise.plc
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc
        - include: literals-hexadecimal
        - include: assert-stmt-end
    # INVI, INVD, NEGI, NEGD, NEGR
    - match: \b(?i:INV[ID]|NEG[IDR])\b
      scope: keyword.operator.bitwise.plc
      push: assert-stmt-end
    # RLD, RLDA, RRD, RRDA
    # SLW, SLD, SRW, SRD
    # SSI, SSD
    - match: \b(?i:R[LR]DA?|S[LR][WD]|SS[DI])\b
      scope: keyword.operator.bitwise.plc
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc
        - include: literals-uint16
        - include: assert-stmt-end

  awl-stmt-arithmetic:
    # -I, -D, -R, +I, +D, +R, ...
    - match: '[-+*/][IDR]\b'
      scope: keyword.operator.arithmetic.plc
      push: assert-stmt-end
    # INC, DEC
    - match: \b(?i:INC|DEC)\b
      scope: keyword.operator.arithmetic.plc
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc
        - include: literals-uint16
        - include: assert-stmt-end
    # + 10, + -10, + L#20, + L#-20, + B#16#A
    - match: \+
      scope: keyword.operator.arithmetic.plc
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc
        - include: literals-decimal
        - include: literals-hexadecimal
        - include: assert-stmt-end
    # 32-bit floating point operations
    - match: \b(?i:ABS|A?COS|A?SIN|A?TAN|EXP|LN|MOD|SQRT?)\b
      scope: keyword.operator.arithmetic.plc
      push: assert-stmt-end
    # type conversions
    # BTI, ITB, BTD, ITD, DTB, DTR
    # INVI, INVD, NEGI, NEGD, NEGR
    # TAW, TAD
    # RND, RND+ RND-, TRUNC
    - match: \b(?i:IT[BD]|[BD]TI|DT[BR]|RND[-+]?|TRUNC|TA[WD])\b
      scope: keyword.operator.arithmetic.convert.plc
      push: assert-stmt-end

  awl-stmt-assignment:
    # L, LC
    - match: \b(?i:LC?)\b
      scope: keyword.operator.arithmetic.load.plc
      push:
        - meta_content_scope: meta.operand.numeric.plc
        - include: literals
        - include: operands-binary
        - include: operands-counter
        - include: operands-timer
        - include: operands-symbols
        - include: assert-stmt-end
    # T
    - match: \b(?i:T)\b
      scope: keyword.operator.assignment.plc
      push:
        - meta_content_scope: meta.operand.assignment.plc
        - include: operands
        - include: assert-stmt-end
    # =, S, R
    - match: =|\b(?i:[RS])\b
      scope: keyword.operator.assignment.logical.plc
      push:
        - meta_content_scope: meta.operand.marker.plc meta.operand.counter.plc meta.operand.timer.plc
        - include: operands
        - include: assert-stmt-end
    # FR
    - match: \b(?i:FR)\b
      scope: keyword.operator.assignment.logical.plc
      push:
        - meta_content_scope: meta.operand.counter.plc meta.operand.timer.plc
        - include: operands
        - include: assert-stmt-end
    # SA, SE, SI, SS, SV
    - match: \b(?i:S[AEISV]?)\b
      scope: keyword.operator.timer.plc
      push:
        - meta_content_scope: meta.operand.s5time.plc
        - include: operands
        - include: assert-stmt-end
    # ZV, ZR
    - match: \b(?i:Z[RV])\b
      scope: keyword.operator.counter.plc
      push:
        - meta_content_scope: meta.operand.counter.plc
        - include: operands
        - include: assert-stmt-end

  awl-stmt-akku:
    - match: \b(?i:POP|PUSH|TAK|ENT|LEAVE)\b
      scope: keyword.operator.assignment.akku.plc
      push: assert-stmt-end

  awl-stmt-datablock:
    - match: \b(?i:AUF)\b
      scope: keyword.operator.load.db.plc
      push:
        - meta_content_scope: meta.operand.datablock.plc
        - include: operands-datablock
        - include: operands-symbols
        - include: assert-stmt-end
    - match: \b(?i:TDB)\b
      scope: keyword.operator.db.plc
      push: assert-stmt-end

  awl-stmt-address-register:
    # LAR1, LAR2
    - match: \b(?i:LAR)[12]\b
      scope: keyword.operator.load.address-register.plc
      push:
        - meta_content_scope: meta.operand.pointer.plc
        - include: literals-pointer
        - include: operands
        - include: assert-stmt-end
    # TAR1, TAR2
    - match: \b(?i:TAR)[12]\b
      scope: keyword.operator.assignment.address-register.plc
      push:
        - meta_content_scope: meta.operand.pointer.plc
        - include: operands
        - include: assert-stmt-end
    # +AR1, +AR2
    - match: \+(?i:AR)[12]\b
      scope: keyword.operator.arithmetic.address-register.plc
      push:
        - meta_content_scope: meta.operand.pointer.plc
        - include: literals-pointer
        - include: operands
        - include: assert-stmt-end

  awl-stmt-goto:
    # BE, BEA, BEB
    - match: \b(?i:BE[AB]?)\b  # function block end
      scope: keyword.operator.blockend.plc
      push: assert-stmt-end
    - match: |-
          \b(?xi:
              SPL       # case
            | SPA       # always
            | SPBN?B?   # VKE = 1/0
            | SPBIN?    # BIE = 1/0
            | SPO       # OV = 1
            | SPS       # OS = 1
            | SPZ       # result = 0
            | SPN       # result <> 0
            | SPP       # result > 0
            | SPM       # result < 0
            | SPPZ      # result >= 0
            | SPMZ      # result <= 0
            | SPU       # result invalid
            | LOOP      # decrement akku and jump if > 0
          )\b
      scope: keyword.operator.goto.plc
      push:
        - meta_content_scope: meta.operand.goto-label.plc
        - match: \w{1,4}
          scope: variable.label.plc
          set: assert-stmt-end
        - include: assert-stmt-end

###[ AWL FUNCTION CALLS ]######################################################

  awl-stmt-call:
    ## CC, UC
    - match: \b(?i:[CU]C)\b
      scope: meta.function-call.plc keyword.control.call.plc
      push:
        - meta_content_scope: meta.function-call.identifier.plc
        - include: awl-stmt-call-name
        - include: assert-stmt-end
    # CALL
    - match: \b(?i:CALL)\b
      scope: meta.function-call.plc keyword.control.call.plc
      push:
        - awl-stmt-call-arguments
        - awl-stmt-call-annotation
        - awl-stmt-call-instance
        - awl-stmt-call-name

  awl-stmt-call-meta:
    - meta_scope: meta.function-call.plc
    - include: else-pop

  awl-stmt-call-name:
    # global symbols
    - match: (")[^"]*(")
      captures:
        0: variable.function.global.plc
        1: punctuation.definition.variable.begin.plc
        2: punctuation.definition.variable.end.plc
      pop: 1
    # local variables
    - match: (#)({{ident}})
      captures:
        1: punctuation.definition.variable.begin.plc
        2: variable.function.local.plc
      pop: 1
    # absolute address
    - match: (?i:S?F[BC])\s*\d+\b
      scope: variable.function.address.plc
      pop: 1
    - include: else-pop

  awl-stmt-call-instance:
    - meta_content_scope: meta.function-call.identifier.plc
    - match: ','
      scope: meta.function-call.plc punctuation.separator.sequence.plc
      set: awl-stmt-call-instance-body
    - include: else-pop

  awl-stmt-call-instance-body:
    - meta_content_scope: meta.function-call.instance.plc
    - include: operands-datablock-absolute
    - include: operands-symbols
    - include: else-pop

  awl-stmt-call-annotation:
    - match: \{
      scope: punctuation.definition.annotation.begin.plc
      set:
        - awl-stmt-call-meta
        - annotation-key
    - include: else-pop

  awl-stmt-call-arguments:
    - match: \(
      scope: punctuation.section.group.begin.plc
      set: awl-stmt-call-arguments-body
    - include: else-pop

  awl-stmt-call-arguments-body:
    - meta_scope: meta.function-call.arguments.plc meta.group.plc
    - match: \)
      scope: punctuation.section.group.end.plc
      set: assert-stmt-end
    - match: :=
      scope: keyword.operator.assignment.plc
      push: awl-arguments-value
    - match: ','
      scope: punctuation.separator.sequence.plc
    - match: '{{ident}}'
      scope: variable.parameter.plc

  awl-arguments-value:
    - match: (?=[,)])
      pop: 1
    - include: literals
    - include: operands-absolute
    - include: operands-symbols

###[ OPERANDS ]################################################################

  operands:
    - include: operands-binary
    - include: operands-counter
    - include: operands-datablock
    - include: operands-logical
    - include: operands-timer
    - include: operands-symbols

  operands-absolute:
    - include: operands-binary-absolute
    - include: operands-counter-absolute
    - include: operands-datablock-absolute
    - include: operands-logical-absolute
    - include: operands-timer-absolute

###[ DATABLOCKS ]##############################################################

  operands-datablock:
    - include: operands-datablock-absolute
    - include: operands-datablock-indirect

  operands-datablock-absolute:
    # DB10, DB 10 : datablocks
    - match: \b(?i:D[BI])[ \t]*{{int}}
      scope: meta.address.plc variable.language.db.plc

  operands-datablock-indirect:
    - match: \b((?i:D[BI]))[ \t]*(?=\[)
      captures:
        0: meta.address.indirect.plc
        1: variable.language.timer.plc
      push: address-indirect

###[ BINARIES ]################################################################

  operands-binary:
    - include: operands-binary-absolute
    - include: operands-binary-indirect

  operands-binary-absolute:
    - match: \b(?i:DBNO|DINO|DBLG|DILG|STW)\b
      scope: meta.address.plc variable.language.plc
    # EB10, EW10, ED10, PEB10, PEW10, PED10
    # AB10, AW10, AD10, PAB10, PAW10, PAD10
    # MB10, MW10, MD10
    # LB10, LW10, LD10, VB10, VW10, VD10
    # DIW10, DIW10, DID10
    - match: \b(?i:(?:P?[AEIQ]|D[BI]|[LMV])[BWD])[ \t]*{{int}}
      scope: meta.address.plc variable.language.address.plc
    # DBB10, DBD10, DBW10, DB3.DBB10, DB3.DIB10, DB3.DBW10
    - match: \b(?i:(DB\d+)(\.))(DB[BWD][ \t]*{{int}})
      captures:
        0: meta.address.plc
        1: variable.language.db.plc
        2: punctuation.accessor.dot.plc
        3: variable.language.address.plc

  operands-binary-indirect:
    # B[...], MB [...], LB [...], VB [...], DBB [...], DIB[...], AB[], EB[], PAB[], PEB[]
    # W[...], MW [...], LW [...], VW [...], DIW [...], DIW[...], AW[], EW[], PAW[], PEW[]
    # D[...], MD [...], LD [...], VD [...], DID [...], DID[...], AD[], ED[], PAD[], PED[]
    - match: \b((?i:P?[AEIQ]|D[BI]|[LMV])?[BWD])[ \t]*(?=\[)
      captures:
        0: meta.address.indirect.plc
        1: variable.language.address.plc
      push: address-indirect

###[ COUNTERS ]################################################################

  operands-counter:
    - include: operands-counter-absolute
    - include: operands-counter-indirect

  operands-counter-absolute:
    # C10, C 10 : counter (english)
    # Z10, Z 10 : counter (german)
    - match: \b(?i:[CZ])[ \t]*{{int}}
      scope: meta.address.plc variable.language.counter.plc

  operands-counter-indirect:
    # C[MW10], C [MW10] : counter (english)
    # Z[MW10], Z [MW10] : counter (german)
    - match: \b((?i:[CZ]))[ \t]*(?=\[)
      captures:
        0: meta.address.indirect.plc
        1: variable.language.counter.plc
      push: address-indirect

###[ LOGICALS ]################################################################

  operands-logical:
    - include: operands-logical-absolute
    - include: operands-logical-indirect

  operands-logical-absolute:
    # M 10.0, DIX 10.0, L 0.0, ...
    - match: \b(?i:DIX|[AEIQLMV])\s*\d+(\.)\d+
      captures:
        0: meta.address.plc variable.language.address.plc
        1: punctuation.separator.decimal.plc
    # DB10.DBX 10.0
    - match: \b(?i:(DB\d+)(\.))?(DBX[ \t]*\d+(\.){{int}})
      captures:
        0: meta.address.plc
        1: variable.language.db.plc
        2: punctuation.accessor.dot.plc
        3: variable.language.address.plc
        4: punctuation.separator.decimal.plc
    # status register A0 A1
    - match: (?:==|<>|>=|<=|<|>)0\b
      scope: meta.address.plc variable.language.status.plc
    # BIE, OV
    - match: \b(?i:BIE|OV)\b
      scope: meta.address.plc variable.language.status.plc

  operands-logical-indirect:
    # DBX [AR1,P#0.0]
    - match: \b((?i:D[BI]X))[ \t]*(?=\[)
      captures:
        0: meta.address.indirect.plc
        1: variable.language.address.plc
      push: address-indirect
    # [AR1,P#0.0]
    - match: \[
      scope: punctuation.section.brackets.begin.plc
      push: address-indirect-body

###[ TIMERS ]##################################################################

  operands-timer:
    - include: operands-timer-absolute
    - include: operands-timer-indirect

  operands-timer-absolute:
    # T10, T 10 : timer
    - match: \b[Tt][ \t]*{{int}}
      scope: meta.address.plc variable.language.timer.plc

  operands-timer-indirect:
    # T[MW10], T [MW10] : timer
    - match: \b([Tt])[ \t]*(?=\[)
      captures:
        0: meta.address.indirect.plc
        1: variable.language.timer.plc
      push: address-indirect

###[ OPERAND PROTOTYPES ]######################################################

  address-indirect:
    - meta_include_prototype: false
    - match: \[
      scope: punctuation.section.brackets.begin.plc
      set: address-indirect-body

  address-indirect-body:
    - meta_scope: meta.address.indirect.plc meta.brackets.plc
    - match: \]
      scope: punctuation.section.brackets.end.plc
      pop: 1
    - include: illegal-eol
    - include: literals-pointer
    - include: punctuation-separators
    - include: operands-address-registers
    - include: operands-binary-absolute
    - include: operands-symbols
